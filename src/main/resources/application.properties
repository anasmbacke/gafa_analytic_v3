spring.data.mongodb.uri=ENC(o3vhkJYLBr9MmY3o+xA78ggk+I8lgyaQ243CmZKmnRaYaBZxaNyJYgJeRg8tEV+Z5NsY7QHJBwIC9pMHMnNS2ebh2g4g7KIJf6iQNwsg1CZtXhW1PFZXUi0JXtY9l+CeZzf/rOBNB8wV1YxhvAdRV1HhRxbHRBmjs4yuIny46VyZ555DfPXGkZWn3QpqTphoXO/v+rnbnkEsDACtrBE1oWqjXXGKVC/+qd72zG17Rl/pNY7aUWPLyFFf/0O3+CiDvy7QANXdIQ3rgLjoHWFLs6YOfhTlm/UD1iH6p/6eCFg+XUmhxu4ZDzv7SERJ+QIWY/J3IRJ2H4htYf9ce7bhWqhgaJ5CkiZastJs3v/vDEclx8YfIvsd8rRe7QdkpRBv)
app.baseurl=/digipay/v3/

kafka.bootstrap.servers=10.0.1.227:9092
spring.kafka.consumer.bootstrap-servers = ENC(4s8u7hZzfWf0njsD/EDhd4H9Fuja2xn0)
spring.kafka.producer.key-serializer = org.apache.kafka.common.serialization.StringSerializer
spring.kafka.producer.value-serializer = org.springframework.kafka.support.serializer.JsonSerializer

spring.main.allow-bean-definition-overriding=true

spring.servlet.multipart.enabled=true
spring.servlet.multipart.file-size-threshold=2KB
spring.servlet.multipart.max-file-size=200MB
spring.servlet.multipart.max-request-size=215MB

## Spring DATASOURCE (DataSourceAutoConfiguration & DataSourceProperties)
spring.datasource.url = ENC(rPewvEAPQBM9ss7kEn/s899euZizL9vnTHubbAvdBubHn5rL1lI1colZ0kOlCSlrEXz92y/a+Z1won+k3NWPnSBEM7G/dYP5LPDFlceKVZC+3ubLHAdNuB2IP+OBjJN2i0YGWSJkfJ713Fp3hxjiwA==)
spring.datasource.username = ENC(W64XVws/ZvQJ+m+udY286g==)
spring.datasource.password = ENC(AYd46kTlHOvZD8wEzFYNwcXw4miXcCB2)
spring.datasource.driver-class-name=com.mysql.jdbc.Driver

spring.elasticsearch.uris=10.0.1.124
spring.elasticsearch.username=ENC(lg8y1mJTewyZeJOX+CccRQ==)
spring.elasticsearch.password=ENC(FdN7OQhE/AG6+h7P9GGSYQ0yqsWZa9Ua0Uuen92iW+U=)
spring.elasticsearch.port=9200
spring.elasticsearch.host.type=http

customer_forgot_password_url = /reset-password
merchant_forgot_password_url = /reset-password
agent_forgot_password_url = /reset-password
admin_forgot_password_url = /reset-password
staff_forgot_password_url = /reset-password

jasypt.encryptor.algorithm=PBEWithMD5AndDES
jasypt.encryptor.iv-generator-classname=org.jasypt.iv.NoIvGenerator
spring_auth_token_expiry_time_in_minute = 10080

## Hibernate Properties
# The SQL dialect makes Hibernate generate better SQL for the chosen database
spring.jpa.properties.hibernate.dialect = org.hibernate.dialect.MySQL5Dialect

# Hibernate ddl auto (create, create-drop, validate, update)
#spring.jpa.hibernate.ddl-auto = update
#spring.jpa.show-sql = true

logging.level.org.springframework.jdbc.core = TRACE
log4j.logger.org.hibernate.SQL=debug
log4j.logger.org.hibernate.type.descriptor.sql=trace

#company config
app.Companyname=Gafa
app.Companyemail=company@digipay.com

is_otp_generate_random=false

app.is_noti_amount_in_decimal=true

update.referral.program.status.url = https://api.gafapay.com/digipay/v3/reward_promotion/referral_program

user.mail.verification.url=   https://api.gafapay.com/digipay/v3/user/user_email_verification
app.send_credit_data_base_url= https://api.gafapay.com/digipay/v3/topup_bill_payment/airtime/update_status

#docker_core_wallet_transaction
app.get_all_txn_amount_count_url =https://api.gafapay.com/digipay/v3/wallet_transaction/reward/txn_amount_count
app.apply_reward_redeem_cashback =https://api.gafapay.com/digipay/v3/wallet_transaction/reward/txn_cashback
app.make_txn_entry_reward =https://api.gafapay.com/digipay/v3/wallet_transaction/reward/txn_entry
app.user_detail =https://api.gafapay.com/digipay/v3/user/user_detail

app.serachUserInfo=https://api.gafapay.com/digipay/v3/auth/search_user_by_id
app.user_info_notification =https://api.gafapay.com/digipay/v3/auth/user_info

cron.scheduler.url = https://api.gafapay.com:5011/scheduler/cron
cron.scheduler.stop.url = https://api.gafapay.com:5011/scheduler/cronstop
delay.scheduler.url = https://api.gafapay.com:5011/scheduler/start
delay.scheduler.stop.url = https://api.gafapay.com:5011/scheduler/stop
schedule.task.url = http://gafawalletalb-77644329.ap-south-1.elb.amazonaws.com:5011/scheduler/start
wallet.transfer.url = https://api.gafapay.com/digipay/v3/transaction/wallet_transfer

update.cash.transfer.request.url = https://api.gafapay.com/digipay/v3/transaction/cron_update_cash_transfer_request
cancel.schedule.task.url = http://gafawalletalb-77644329.ap-south-1.elb.amazonaws.com:5011/scheduler/stop
flutterwave.payment_gateway.callback = https://api.gafapay.com/digipay/v3/payment_gateway/flutter_wave_payment_callback

app.authenticationUrl = http://thawanyalb-v3-233377479.ap-south-1.elb.amazonaws.com:81/digipay/v2/auth/authentication

#Aws S3 bucket
aws.s3.access.key =ENC(1YSjucxVYJtzOCJDsp2tBXy2ag/QExKfhN/1yGDb59M=)
aws.s3.secret.key=ENC(gPg7M2+0qKfd6wDT3rDfrFDw9UJLaIA4XFJDYbx2GOjatOInCa1LIA1LWwrTTH+L2ILHZxIRv74=)
aws.s3.bucket.name=digipay-bucket
aws.s3.region=us-east-1

#spring security purpose
spring.security.maximumallowed.session = 5

###redis config####
spring.redis.host=ENC(3Zit9L9zvTCDeUypV/KuVa+lCfL0dO+yxL7uFp057QQWz/Fhse925MYCfwURShNy4DhFpaLOiE8=)
spring.redis.port=6379
spring.redis.password=
spring.redis.timeout=900000000
#Added this configuration in order to overcome connection lost from redis
spring.redis.pool.max-active=-1 # Max number of connections that can be allocated by the pool at a given time. Use a negative value for no limit.
spring.redis.pool.max-idle=4 # Max number of "idle" connections in the pool. Use a negative value to indicate an unlimited number of idle connections.
spring.redis.pool.max-wait=900000000 # Maximum amount of time (in milliseconds) a connection allocation should block before throwing an exception when the pool is exhausted. Use a negative value to block indefinitely.
spring.redis.pool.min-idle=2

is_otp_send_for_new_user = true

#Additional configurations
spring.session.redis.flush-mode=on-save
spring.session.redis.namespace=spring:session

#Datadog client
data.dog.log.service.name= spring_gafa_v3_prod
data.dog.log.source.name = spring_gafa_v3_prod
data.dog.log.api.key=66a9bd85d24db9361f88a2114ad9a05a
data.dog.log.application.key =b3299f947e46da53a984c8d69fcf5cc29e6ab684

#tcp.server.fallback.ssl.keystore.path=
#tcp.server.fallback.ssl.keystore.password=
tcp.client.fallback.connection.host.ip=192.168.0.101
tcp.communication.fallback.connect.port=2030
tcp.client.header.length=4

tcp.server.host=192.168.0.101
tcp.visa.client.tcp.port=2020
tcp.server.header.length=4

tcp.visa.switch.tcp.port=2030

#jpos.packager.path=conf/iso87.xml
jpos.packager.path=conf/iso93ascii.xml

keyStoreFile=conf/glide.keystore
keyStorePassword=glide1
keyStoreType=JKS
sslContextType=TLSv1.2
keyManagerFactoryType=SunX509
URL=us01hsm01test.Virtucrypt.com
port=3150
supportedTxnType=0210,1814

#checksum property
checksum = false
server.server-header=HTTPS

sendgrid.from_email=sujata.sharma@peerbits.com
sendgrid.to_email=dev@digipay.guru
spring.sendgrid.api-key=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
spring.sendgrid.proxy.host=smtp.sendgrid.net
spring.sendgrid.proxy.port=587
admin.pass = 123456
one_number_for_all_user_type = false

omni.client.url = http://118.179.220.205:9100/OmniCardClientWS/rs/omnicmsws/getTrxnDetails/json
common.schedule.transfer.url = https://api.gafapay.com/digipay/v3/transaction/common_transfer_endpoint_for_schedule_payment

host = https://api.gafapay.com
dataDogHost = Gafa
aws.accessKey=AKIAXUAXUP55QLURN3OY
aws.secretKey=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

#generate Kyc Link
generate.kyc.link=https://idvarifiation.netlify.app/
redirect.url=https://api.gafapay.com/
admin.mail.reset.password.url= https://api.gafapay.com/reset-password/

auditlog.db.name=gafa_v3
